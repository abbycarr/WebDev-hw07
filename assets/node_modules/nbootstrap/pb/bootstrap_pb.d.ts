// package: lnks.nanoapp
// file: bootstrap.proto

import * as jspb from "google-protobuf";

export class LaunchInfo extends jspb.Message {
  getProgramsMap(): jspb.Map<string, LaunchInfo.Program>;
  clearProgramsMap(): void;
  clearArgsList(): void;
  getArgsList(): Array<string>;
  setArgsList(value: Array<string>): void;
  addArgs(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LaunchInfo.AsObject;
  static toObject(includeInstance: boolean, msg: LaunchInfo): LaunchInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LaunchInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LaunchInfo;
  static deserializeBinaryFromReader(message: LaunchInfo, reader: jspb.BinaryReader): LaunchInfo;
}

export namespace LaunchInfo {
  export type AsObject = {
    programsMap: Array<[string, LaunchInfo.Program.AsObject]>,
    argsList: Array<string>,
  }

  export class Program extends jspb.Message {
    getUrl(): string;
    setUrl(value: string): void;

    getHash(): string;
    setHash(value: string): void;

    getSign(): string;
    setSign(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Program.AsObject;
    static toObject(includeInstance: boolean, msg: Program): Program.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Program, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Program;
    static deserializeBinaryFromReader(message: Program, reader: jspb.BinaryReader): Program;
  }

  export namespace Program {
    export type AsObject = {
      url: string,
      hash: string,
      sign: string,
    }
  }
}

export class RuntimeInfo extends jspb.Message {
  clearAddrsList(): void;
  getAddrsList(): Array<string>;
  setAddrsList(value: Array<string>): void;
  addAddrs(value: string, index?: number): string;

  getPlatform(): string;
  setPlatform(value: string): void;

  getHash(): string;
  setHash(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RuntimeInfo.AsObject;
  static toObject(includeInstance: boolean, msg: RuntimeInfo): RuntimeInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RuntimeInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RuntimeInfo;
  static deserializeBinaryFromReader(message: RuntimeInfo, reader: jspb.BinaryReader): RuntimeInfo;
}

export namespace RuntimeInfo {
  export type AsObject = {
    addrsList: Array<string>,
    platform: string,
    hash: string,
  }
}

export class PingRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PingRequest.AsObject;
  static toObject(includeInstance: boolean, msg: PingRequest): PingRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PingRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PingRequest;
  static deserializeBinaryFromReader(message: PingRequest, reader: jspb.BinaryReader): PingRequest;
}

export namespace PingRequest {
  export type AsObject = {
  }
}

export class PongResponse extends jspb.Message {
  getPlatform(): string;
  setPlatform(value: string): void;

  getVersion(): string;
  setVersion(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PongResponse.AsObject;
  static toObject(includeInstance: boolean, msg: PongResponse): PongResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PongResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PongResponse;
  static deserializeBinaryFromReader(message: PongResponse, reader: jspb.BinaryReader): PongResponse;
}

export namespace PongResponse {
  export type AsObject = {
    platform: string,
    version: string,
  }
}

export class ListProxysRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListProxysRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListProxysRequest): ListProxysRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListProxysRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListProxysRequest;
  static deserializeBinaryFromReader(message: ListProxysRequest, reader: jspb.BinaryReader): ListProxysRequest;
}

export namespace ListProxysRequest {
  export type AsObject = {
  }
}

export class ListProxysResponse extends jspb.Message {
  clearProxysList(): void;
  getProxysList(): Array<RuntimeInfo>;
  setProxysList(value: Array<RuntimeInfo>): void;
  addProxys(value?: RuntimeInfo, index?: number): RuntimeInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListProxysResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListProxysResponse): ListProxysResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListProxysResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListProxysResponse;
  static deserializeBinaryFromReader(message: ListProxysResponse, reader: jspb.BinaryReader): ListProxysResponse;
}

export namespace ListProxysResponse {
  export type AsObject = {
    proxysList: Array<RuntimeInfo.AsObject>,
  }
}

export class BlobBody extends jspb.Message {
  getFileMd5Hash(): string;
  setFileMd5Hash(value: string): void;

  getData(): Uint8Array | string;
  getData_asU8(): Uint8Array;
  getData_asB64(): string;
  setData(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BlobBody.AsObject;
  static toObject(includeInstance: boolean, msg: BlobBody): BlobBody.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BlobBody, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BlobBody;
  static deserializeBinaryFromReader(message: BlobBody, reader: jspb.BinaryReader): BlobBody;
}

export namespace BlobBody {
  export type AsObject = {
    fileMd5Hash: string,
    data: Uint8Array | string,
  }
}

export class UploadResult extends jspb.Message {
  getDone(): boolean;
  setDone(value: boolean): void;

  getUploadedSize(): number;
  setUploadedSize(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UploadResult.AsObject;
  static toObject(includeInstance: boolean, msg: UploadResult): UploadResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UploadResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UploadResult;
  static deserializeBinaryFromReader(message: UploadResult, reader: jspb.BinaryReader): UploadResult;
}

export namespace UploadResult {
  export type AsObject = {
    done: boolean,
    uploadedSize: number,
  }
}

export interface ConfigMap {
  ZERO: 0;
  TCPPORT: 7890;
  BOOTSTRAPVERSION: 1;
}

export const Config: ConfigMap;

