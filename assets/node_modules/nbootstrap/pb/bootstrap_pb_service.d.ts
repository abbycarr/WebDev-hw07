// package: lnks.nanoapp
// file: bootstrap.proto

import * as bootstrap_pb from "./bootstrap_pb";
import {grpc} from "@improbable-eng/grpc-web";

type bootstrapPing = {
  readonly methodName: string;
  readonly service: typeof bootstrap;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof bootstrap_pb.PingRequest;
  readonly responseType: typeof bootstrap_pb.PongResponse;
};

type bootstrapLaunchProxy = {
  readonly methodName: string;
  readonly service: typeof bootstrap;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof bootstrap_pb.LaunchInfo;
  readonly responseType: typeof bootstrap_pb.RuntimeInfo;
};

type bootstrapAttachProxy = {
  readonly methodName: string;
  readonly service: typeof bootstrap;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof bootstrap_pb.RuntimeInfo;
  readonly responseType: typeof bootstrap_pb.RuntimeInfo;
};

type bootstrapListProxys = {
  readonly methodName: string;
  readonly service: typeof bootstrap;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof bootstrap_pb.ListProxysRequest;
  readonly responseType: typeof bootstrap_pb.ListProxysResponse;
};

export class bootstrap {
  static readonly serviceName: string;
  static readonly Ping: bootstrapPing;
  static readonly LaunchProxy: bootstrapLaunchProxy;
  static readonly AttachProxy: bootstrapAttachProxy;
  static readonly ListProxys: bootstrapListProxys;
}

type BlobStoreUpload = {
  readonly methodName: string;
  readonly service: typeof BlobStore;
  readonly requestStream: true;
  readonly responseStream: false;
  readonly requestType: typeof bootstrap_pb.BlobBody;
  readonly responseType: typeof bootstrap_pb.UploadResult;
};

export class BlobStore {
  static readonly serviceName: string;
  static readonly Upload: BlobStoreUpload;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class bootstrapClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  ping(
    requestMessage: bootstrap_pb.PingRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: bootstrap_pb.PongResponse|null) => void
  ): UnaryResponse;
  ping(
    requestMessage: bootstrap_pb.PingRequest,
    callback: (error: ServiceError|null, responseMessage: bootstrap_pb.PongResponse|null) => void
  ): UnaryResponse;
  launchProxy(
    requestMessage: bootstrap_pb.LaunchInfo,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: bootstrap_pb.RuntimeInfo|null) => void
  ): UnaryResponse;
  launchProxy(
    requestMessage: bootstrap_pb.LaunchInfo,
    callback: (error: ServiceError|null, responseMessage: bootstrap_pb.RuntimeInfo|null) => void
  ): UnaryResponse;
  attachProxy(
    requestMessage: bootstrap_pb.RuntimeInfo,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: bootstrap_pb.RuntimeInfo|null) => void
  ): UnaryResponse;
  attachProxy(
    requestMessage: bootstrap_pb.RuntimeInfo,
    callback: (error: ServiceError|null, responseMessage: bootstrap_pb.RuntimeInfo|null) => void
  ): UnaryResponse;
  listProxys(
    requestMessage: bootstrap_pb.ListProxysRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: bootstrap_pb.ListProxysResponse|null) => void
  ): UnaryResponse;
  listProxys(
    requestMessage: bootstrap_pb.ListProxysRequest,
    callback: (error: ServiceError|null, responseMessage: bootstrap_pb.ListProxysResponse|null) => void
  ): UnaryResponse;
}

export class BlobStoreClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  upload(metadata?: grpc.Metadata): RequestStream<bootstrap_pb.BlobBody>;
}

