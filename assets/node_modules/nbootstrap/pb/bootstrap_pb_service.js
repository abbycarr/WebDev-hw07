// package: lnks.nanoapp
// file: bootstrap.proto

var bootstrap_pb = require("./bootstrap_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var bootstrap = (function () {
  function bootstrap() {}
  bootstrap.serviceName = "lnks.nanoapp.bootstrap";
  return bootstrap;
}());

bootstrap.Ping = {
  methodName: "Ping",
  service: bootstrap,
  requestStream: false,
  responseStream: false,
  requestType: bootstrap_pb.PingRequest,
  responseType: bootstrap_pb.PongResponse
};

bootstrap.LaunchProxy = {
  methodName: "LaunchProxy",
  service: bootstrap,
  requestStream: false,
  responseStream: false,
  requestType: bootstrap_pb.LaunchInfo,
  responseType: bootstrap_pb.RuntimeInfo
};

bootstrap.AttachProxy = {
  methodName: "AttachProxy",
  service: bootstrap,
  requestStream: false,
  responseStream: false,
  requestType: bootstrap_pb.RuntimeInfo,
  responseType: bootstrap_pb.RuntimeInfo
};

bootstrap.ListProxys = {
  methodName: "ListProxys",
  service: bootstrap,
  requestStream: false,
  responseStream: false,
  requestType: bootstrap_pb.ListProxysRequest,
  responseType: bootstrap_pb.ListProxysResponse
};

exports.bootstrap = bootstrap;

function bootstrapClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

bootstrapClient.prototype.ping = function ping(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(bootstrap.Ping, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

bootstrapClient.prototype.launchProxy = function launchProxy(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(bootstrap.LaunchProxy, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

bootstrapClient.prototype.attachProxy = function attachProxy(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(bootstrap.AttachProxy, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

bootstrapClient.prototype.listProxys = function listProxys(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(bootstrap.ListProxys, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.bootstrapClient = bootstrapClient;

var BlobStore = (function () {
  function BlobStore() {}
  BlobStore.serviceName = "lnks.nanoapp.BlobStore";
  return BlobStore;
}());

BlobStore.Upload = {
  methodName: "Upload",
  service: BlobStore,
  requestStream: true,
  responseStream: false,
  requestType: bootstrap_pb.BlobBody,
  responseType: bootstrap_pb.UploadResult
};

exports.BlobStore = BlobStore;

function BlobStoreClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

BlobStoreClient.prototype.upload = function upload(metadata) {
  var listeners = {
    end: [],
    status: []
  };
  var client = grpc.client(BlobStore.Upload, {
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport
  });

  // patch this
  listeners.data = []
  client.onMessage(function(response) {
    listeners.data.forEach(function (handler) {
      handler(response)
    });
  })

  client.onEnd(function (status, statusMessage, trailers) {
    listeners.status.forEach(function (handler) {
      handler({ code: status, details: statusMessage, metadata: trailers });
    });
    listeners.end.forEach(function (handler) {
      handler({ code: status, details: statusMessage, metadata: trailers });
    });
    listeners = null;
  });
  return {
    on: function (type, handler) {
      listeners[type].push(handler);
      return this;
    },
    write: function (requestMessage) {
      if (!client.started) {
        client.start(metadata);
      }
      client.send(requestMessage);
      return this;
    },
    end: function () {
      client.finishSend();
    },
    cancel: function () {
      listeners = null;
      client.close();
    }
  };
};

exports.BlobStoreClient = BlobStoreClient;

